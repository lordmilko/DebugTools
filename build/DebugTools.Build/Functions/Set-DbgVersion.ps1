<#
.SYNOPSIS
Sets the version of all components used when building DebugTools

.DESCRIPTION
The Set-DbgVersion cmdlet updates the version of DebugTools. The Set-DbgVersion cmdlet allows the major, minor, build and revision components to be replaced with any arbitrary version. Typically the Set-DbgVersion cmdlet is used to revert mistakes made when utilizing the Update-DbgVersion cmdlet as part of a normal release, or to reset the version when updating the major or minor version components.

.PARAMETER Version
The version to set DebugTools to. Must at least include a major and minor version number.

.EXAMPLE
C:\> Set-DbgVersion 1.2.3
Set the version to version 1.2.3.0

.EXAMPLE
C:\> Set-DbgVersion 1.2.3.4
Set the version to version 1.2.3.4. Systems that only utilize the first three version components will be versioned as 1.2.3

.LINK
Get-DbgVersion
Update-DbgVersion
#>
function Set-DbgVersion
{
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true, Position = 0)]
        [Version]$Version
    )

    $old = Get-DbgVersion -ErrorAction SilentlyContinue

    SetDbgVersionInternal $Version

    $new = Get-DbgVersion -ErrorAction SilentlyContinue

    $result = [PSCustomObject]@{
        Package = $null
        Assembly = $null
        File = $null
        Module = $null
        ModuleTag = $null
    }

    if($old.PreviousTag)
    {
        $result | Add-Member PreviousTag $null
    }

    foreach($property in $old.PSObject.Properties)
    {
        $result.($property.Name) = ([DbgVersionChange]::new($old.($property.Name), $new.($property.Name)))
    }

    return $result
}

function SetDbgVersionInternal($version)
{
    SetVersionProps $version

    SetPsd1Props $version
}

function SetVersionProps($version)
{
    $major = $version.Major
    $minor = $version.Minor
    $build = $version.Build
    $revision = $version.Revision

    if($build -eq -1)
    {
        $build = 0
    }

    if($revision -eq -1)
    {
        $revision = 0
    }

    $version = "$major.$minor.$build"
    $assemblyVersion = "$major.$minor.0.0"
    $fileVersion = "$major.$minor.$build.$revision"
    $infoVersion = "$major.$minor.$build"
    
    if ($revision -ne 0)
    {
        $infoVersion = "$infoVersion.$revision"
    }

    SetVersionPropsCore $version $assemblyVersion $fileVersion $infoVersion
}

function SetVersionPropsCore($version, $assemblyVersion, $fileVersion, $infoVersion)
{
    $newContent = @"
<!-- This code was generated by a tool. Any changes made manually will be lost -->
<!-- the next time this code is regenerated. -->

<Project>
  <PropertyGroup>
    <Version>$version</Version>
    <AssemblyVersion>$assemblyVersion</AssemblyVersion>
    <FileVersion>$fileVersion</FileVersion>
    <InformationalVersion>$infoVersion</InformationalVersion>
  </PropertyGroup>
</Project>
"@

    $root = Get-SolutionRoot

    $props = Join-Path $root "build\Version.props"

    Set-Content $props $newContent
}

function SetPsd1Props($version)
{
    $root = Get-SolutionRoot
    $psd1Path = Join-Path $root "DebugTools.PowerShell\DebugTools.psd1"

    if(!(Test-Path $psd1Path))
    {
        throw "Cannot find file '$psd1Path' required for PowerShell Module versioning."
    }

    $psd1Contents = gc $psd1Path

    $major = $version.Major
    $minor = $version.Minor
    $build = $version.Build

    if($build -eq -1)
    {
        $build = 0
    }

    $version = "$major.$minor.$build"

    $newContents = $psd1Contents | foreach {

        if($_ -like "ModuleVersion = '*")
        {
            $newLine = ($_ -replace "ModuleVersion = '(.+?)'","`ModuleVersion = '$version'")

            return $newLine
        }
        elseif($_ -match ".+ReleaseNotes = '.+/tag.+")
        {
            $newLine = $_ -replace "(.+ReleaseNotes = '.+/tag/)(.+)","`$1v$version"

            return $newLine
        }

        $_
    }

    Set-Content $psd1Path $newContents -Encoding UTF8
}

class DbgVersionChange
{
    [string]$Old
    [string]$New

    DbgVersionChange($old, $new)
    {
        $this.Old = $old
        $this.New = $new
    }

    [string]ToString()
    {
        if($this.Old -eq $this.New)
        {
            return $this.Old
        }

        return "$($this.Old) -> $($this.New)"
    }
}